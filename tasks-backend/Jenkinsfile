pipeline {
    agent any 
    tools {
        maven 'maven'
    }
    stages {
        stage('Build-Backend') {
            steps {
                /*Mover até a pasta*/
                sh '''
                cd tasks-backend/
                mvn clean package -DskipTests
                '''
            }
        }
        stage('Test-Backend'){
            steps {
                /*Mover até a pasta*/
                sh '''
                cd tasks-backend/
                mvn test
                '''
            }
        }
        stage('Sonar-Backend'){

            environment {
                scanner = tool 'SONAR_SCANNER'
            }
            steps {
                withSonarQubeEnv('SONAR'){
                    sh "${scanner}/bin/sonar-scanner -e -Dsonar.host.url=http://172.17.0.1:9000 -Dsonar.projectKey=tasks-backend -Dsonar.java.binaries=tasks-backend/target -Dsonar.exclusions=src/test/**"
                }
            }
        }
        stage('QualityGate-Backend'){
            steps {
                sleep(10)
                timeout(time:1, unit:'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Deploy-Backend') {
            steps {
                /*Mover até a pasta e verificar o nome no arquivo Dockerfile*/ /*Clean-> Build-> Pega o IP do Banco-> Deploy*/
                sh '''
                docker ps -q --filter "name=tasks-backend" | grep -q . && docker stop tasks-backend
                docker build -t backend tasks-backend/
                IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' db)
                docker run --name tasks-backend --rm -e DATABASE_HOST="$IP" -d -p 8001:8001 backend
                '''
            }
        }
        stage('Check-Backend'){
            steps {
                sleep(5)
                sh """curl -I http://172.17.0.1:8001/todo"""
            }
        }
        /*Vamos aos Stagesa do Frontend*/
        stage('Build-Frontend') {
            steps {
                /*Mover até a pasta*/
                sh '''
                cd tasks-frontend/
                mvn clean package -DskipTests
                '''
            }
        }
        stage('Deploy-Frontend') {
            steps {
                /*Mover até a pasta e verificar o nome no arquivo Dockerfile*/ /*Clean-> Build-> Pega o IP do back-> Deploy*/
                sh '''
                docker ps -q --filter "name=tasks-frontend" | grep -q . && docker stop tasks-frontend
                docker build -t frontend tasks-frontend/
                IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' tasks-backend)
                docker run --name tasks-frontend --rm -e BACKEND_HOST="$IP" -d -p 8002:8002 frontend
                '''
            }
        }
        stage('Check-Frontend'){
            steps {
                sleep(5)
                sh """curl -I http://172.17.0.1:8002"""
            }
        }
    }
    post {
        always {
            /*Mover até a pasta*/
            junit allowEmptyResults: true, testResults: 'tasks-backend/target/surefire-reports/*.xml'
            archiveArtifacts artifacts: 'tasks-backend/target/tasks-backend.jar', followSymlinks: false, onlyIfSuccessful: true
        }
    }
}